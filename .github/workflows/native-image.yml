name: Graal

on:
  workflow_dispatch:

jobs:
  build:
    name: 'Build with Graal on ${{ matrix.os }}'
    if: github.repository == 'jreleaser/jreleaser'
    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu-latest, macOS-latest, windows-latest ]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: 'zulu'

      - uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-cache-${{ hashFiles('**/*.gradle') }}-${{ hashFiles('**/gradle.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradlew') }}
          restore-keys: |
            ${{ runner.os }}-gradlew-

      - name: Build
        run: ./gradlew -Prelease=true :jreleaser:assemble -S

      - name: 'Set up Graal'
        uses: graalvm/setup-graalvm@v1
        with:
          version: '21.3.0'
          java-version: '17 '
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install upx
        run: brew install upx
        if: ${{ runner.os == 'macOS' }}

      - name: Version
        id: vars
        uses: juliangruber/read-file-action@v1
        with:
          path: VERSION
          trim: true

      - name: Assemble
        uses: jreleaser/release-action@v1
        with:
          version: early-access
          arguments: assemble -a native-image
        env:
          JRELEASER_PROJECT_VERSION: ${{ steps.vars.outputs.content }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: |
            out/jreleaser/assemble/jreleaser-native/native-image/*.zip

      - name: JReleaser output
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: jreleaser-${{ runner.os }}
          path: |
            out/jreleaser/trace.log
            out/jreleaser/output.properties

  # Collect all executables and release
  release:
    needs: [ build ]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: 'Download all build artifacts'
        uses: actions/download-artifact@v2

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: 'zulu'

      - uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-cache-${{ hashFiles('**/*.gradle') }}-${{ hashFiles('**/gradle.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradlew') }}
          restore-keys: |
            ${{ runner.os }}-gradlew-

      - name: Build
        run: ./gradlew -Prelease=true build -S

      - name: Version
        id: vars
        run: echo ::set-output name=version::$(cat VERSION)

      - name: Assemble
        uses: jreleaser/release-action@v2
        with:
          version: early-access
          arguments: assemble -a jlink
        env:
          JRELEASER_PROJECT_VERSION: ${{ steps.vars.outputs.version }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}

      - name: Release
        uses: jreleaser/release-action@v2
        with:
          version: early-access
          arguments: release -PartifactsDir=artifacts
        env:
          JRELEASER_PROJECT_VERSION: ${{ steps.vars.outputs.version }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.GPG_SECRET_KEY }}
          JRELEASER_DOCKER_DEFAULT_PASSWORD: ${{ secrets.JRELEASER_DOCKER_PASSWORD }}

      - name: JReleaser output
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: jreleaser-release
          path: |
            out/jreleaser/trace.log
            out/jreleaser/output.properties
